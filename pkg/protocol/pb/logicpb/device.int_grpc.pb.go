// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: logic/device.int.proto

package logicpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceIntService_ConnSignIn_FullMethodName = "/logic.DeviceIntService/ConnSignIn"
	DeviceIntService_Offline_FullMethodName    = "/logic.DeviceIntService/Offline"
	DeviceIntService_GetDevice_FullMethodName  = "/logic.DeviceIntService/GetDevice"
	DeviceIntService_ServerStop_FullMethodName = "/logic.DeviceIntService/ServerStop"
)

// DeviceIntServiceClient is the client API for DeviceIntService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceIntServiceClient interface {
	// 登录
	ConnSignIn(ctx context.Context, in *ConnSignInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设备离线
	Offline(ctx context.Context, in *OfflineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取设备信息
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceReply, error)
	// 服务停止
	ServerStop(ctx context.Context, in *ServerStopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceIntServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceIntServiceClient(cc grpc.ClientConnInterface) DeviceIntServiceClient {
	return &deviceIntServiceClient{cc}
}

func (c *deviceIntServiceClient) ConnSignIn(ctx context.Context, in *ConnSignInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceIntService_ConnSignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceIntServiceClient) Offline(ctx context.Context, in *OfflineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceIntService_Offline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceIntServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceReply)
	err := c.cc.Invoke(ctx, DeviceIntService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceIntServiceClient) ServerStop(ctx context.Context, in *ServerStopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceIntService_ServerStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceIntServiceServer is the server API for DeviceIntService service.
// All implementations must embed UnimplementedDeviceIntServiceServer
// for forward compatibility.
type DeviceIntServiceServer interface {
	// 登录
	ConnSignIn(context.Context, *ConnSignInRequest) (*emptypb.Empty, error)
	// 设备离线
	Offline(context.Context, *OfflineRequest) (*emptypb.Empty, error)
	// 获取设备信息
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceReply, error)
	// 服务停止
	ServerStop(context.Context, *ServerStopRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeviceIntServiceServer()
}

// UnimplementedDeviceIntServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceIntServiceServer struct{}

func (UnimplementedDeviceIntServiceServer) ConnSignIn(context.Context, *ConnSignInRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnSignIn not implemented")
}
func (UnimplementedDeviceIntServiceServer) Offline(context.Context, *OfflineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (UnimplementedDeviceIntServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceIntServiceServer) ServerStop(context.Context, *ServerStopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerStop not implemented")
}
func (UnimplementedDeviceIntServiceServer) mustEmbedUnimplementedDeviceIntServiceServer() {}
func (UnimplementedDeviceIntServiceServer) testEmbeddedByValue()                          {}

// UnsafeDeviceIntServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceIntServiceServer will
// result in compilation errors.
type UnsafeDeviceIntServiceServer interface {
	mustEmbedUnimplementedDeviceIntServiceServer()
}

func RegisterDeviceIntServiceServer(s grpc.ServiceRegistrar, srv DeviceIntServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceIntServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceIntService_ServiceDesc, srv)
}

func _DeviceIntService_ConnSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnSignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceIntServiceServer).ConnSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceIntService_ConnSignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceIntServiceServer).ConnSignIn(ctx, req.(*ConnSignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceIntService_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceIntServiceServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceIntService_Offline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceIntServiceServer).Offline(ctx, req.(*OfflineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceIntService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceIntServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceIntService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceIntServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceIntService_ServerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceIntServiceServer).ServerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceIntService_ServerStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceIntServiceServer).ServerStop(ctx, req.(*ServerStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceIntService_ServiceDesc is the grpc.ServiceDesc for DeviceIntService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceIntService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logic.DeviceIntService",
	HandlerType: (*DeviceIntServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnSignIn",
			Handler:    _DeviceIntService_ConnSignIn_Handler,
		},
		{
			MethodName: "Offline",
			Handler:    _DeviceIntService_Offline_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceIntService_GetDevice_Handler,
		},
		{
			MethodName: "ServerStop",
			Handler:    _DeviceIntService_ServerStop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/device.int.proto",
}
