// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: logic/device.int.proto

package logicpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceIntService_SignIn_FullMethodName    = "/logic.DeviceIntService/SignIn"
	DeviceIntService_Heartbeat_FullMethodName = "/logic.DeviceIntService/Heartbeat"
	DeviceIntService_Offline_FullMethodName   = "/logic.DeviceIntService/Offline"
	DeviceIntService_Save_FullMethodName      = "/logic.DeviceIntService/Save"
)

// DeviceIntServiceClient is the client API for DeviceIntService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceIntServiceClient interface {
	// 登录
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInReply, error)
	// 心跳
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 设备离线
	Offline(ctx context.Context, in *OfflineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 创建设备
	Save(ctx context.Context, in *DeviceSaveRequest, opts ...grpc.CallOption) (*DeviceSaveReply, error)
}

type deviceIntServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceIntServiceClient(cc grpc.ClientConnInterface) DeviceIntServiceClient {
	return &deviceIntServiceClient{cc}
}

func (c *deviceIntServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInReply)
	err := c.cc.Invoke(ctx, DeviceIntService_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceIntServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceIntService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceIntServiceClient) Offline(ctx context.Context, in *OfflineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceIntService_Offline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceIntServiceClient) Save(ctx context.Context, in *DeviceSaveRequest, opts ...grpc.CallOption) (*DeviceSaveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceSaveReply)
	err := c.cc.Invoke(ctx, DeviceIntService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceIntServiceServer is the server API for DeviceIntService service.
// All implementations must embed UnimplementedDeviceIntServiceServer
// for forward compatibility.
type DeviceIntServiceServer interface {
	// 登录
	SignIn(context.Context, *SignInRequest) (*SignInReply, error)
	// 心跳
	Heartbeat(context.Context, *HeartbeatRequest) (*emptypb.Empty, error)
	// 设备离线
	Offline(context.Context, *OfflineRequest) (*emptypb.Empty, error)
	// 创建设备
	Save(context.Context, *DeviceSaveRequest) (*DeviceSaveReply, error)
	mustEmbedUnimplementedDeviceIntServiceServer()
}

// UnimplementedDeviceIntServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceIntServiceServer struct{}

func (UnimplementedDeviceIntServiceServer) SignIn(context.Context, *SignInRequest) (*SignInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedDeviceIntServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedDeviceIntServiceServer) Offline(context.Context, *OfflineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offline not implemented")
}
func (UnimplementedDeviceIntServiceServer) Save(context.Context, *DeviceSaveRequest) (*DeviceSaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedDeviceIntServiceServer) mustEmbedUnimplementedDeviceIntServiceServer() {}
func (UnimplementedDeviceIntServiceServer) testEmbeddedByValue()                          {}

// UnsafeDeviceIntServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceIntServiceServer will
// result in compilation errors.
type UnsafeDeviceIntServiceServer interface {
	mustEmbedUnimplementedDeviceIntServiceServer()
}

func RegisterDeviceIntServiceServer(s grpc.ServiceRegistrar, srv DeviceIntServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceIntServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceIntService_ServiceDesc, srv)
}

func _DeviceIntService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceIntServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceIntService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceIntServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceIntService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceIntServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceIntService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceIntServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceIntService_Offline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceIntServiceServer).Offline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceIntService_Offline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceIntServiceServer).Offline(ctx, req.(*OfflineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceIntService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceIntServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceIntService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceIntServiceServer).Save(ctx, req.(*DeviceSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceIntService_ServiceDesc is the grpc.ServiceDesc for DeviceIntService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceIntService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logic.DeviceIntService",
	HandlerType: (*DeviceIntServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _DeviceIntService_SignIn_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _DeviceIntService_Heartbeat_Handler,
		},
		{
			MethodName: "Offline",
			Handler:    _DeviceIntService_Offline_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _DeviceIntService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/device.int.proto",
}
