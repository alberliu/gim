// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: logic/group.int.proto

package logicpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupIntService_Push_FullMethodName   = "/logic.GroupIntService/Push"
	GroupIntService_Create_FullMethodName = "/logic.GroupIntService/Create"
	GroupIntService_Update_FullMethodName = "/logic.GroupIntService/Update"
	GroupIntService_Get_FullMethodName    = "/logic.GroupIntService/Get"
)

// GroupIntServiceClient is the client API for GroupIntService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupIntServiceClient interface {
	// 发送群组消息
	Push(ctx context.Context, in *GroupPushRequest, opts ...grpc.CallOption) (*GroupPushReply, error)
	// 创建群组
	Create(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*GroupCreateReply, error)
	// 更新群组
	Update(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取群组信息
	Get(ctx context.Context, in *GroupGetRequest, opts ...grpc.CallOption) (*GroupGetReply, error)
}

type groupIntServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupIntServiceClient(cc grpc.ClientConnInterface) GroupIntServiceClient {
	return &groupIntServiceClient{cc}
}

func (c *groupIntServiceClient) Push(ctx context.Context, in *GroupPushRequest, opts ...grpc.CallOption) (*GroupPushReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupPushReply)
	err := c.cc.Invoke(ctx, GroupIntService_Push_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupIntServiceClient) Create(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*GroupCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupCreateReply)
	err := c.cc.Invoke(ctx, GroupIntService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupIntServiceClient) Update(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupIntService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupIntServiceClient) Get(ctx context.Context, in *GroupGetRequest, opts ...grpc.CallOption) (*GroupGetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupGetReply)
	err := c.cc.Invoke(ctx, GroupIntService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupIntServiceServer is the server API for GroupIntService service.
// All implementations must embed UnimplementedGroupIntServiceServer
// for forward compatibility.
type GroupIntServiceServer interface {
	// 发送群组消息
	Push(context.Context, *GroupPushRequest) (*GroupPushReply, error)
	// 创建群组
	Create(context.Context, *GroupCreateRequest) (*GroupCreateReply, error)
	// 更新群组
	Update(context.Context, *GroupUpdateRequest) (*emptypb.Empty, error)
	// 获取群组信息
	Get(context.Context, *GroupGetRequest) (*GroupGetReply, error)
	mustEmbedUnimplementedGroupIntServiceServer()
}

// UnimplementedGroupIntServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupIntServiceServer struct{}

func (UnimplementedGroupIntServiceServer) Push(context.Context, *GroupPushRequest) (*GroupPushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedGroupIntServiceServer) Create(context.Context, *GroupCreateRequest) (*GroupCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupIntServiceServer) Update(context.Context, *GroupUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGroupIntServiceServer) Get(context.Context, *GroupGetRequest) (*GroupGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGroupIntServiceServer) mustEmbedUnimplementedGroupIntServiceServer() {}
func (UnimplementedGroupIntServiceServer) testEmbeddedByValue()                         {}

// UnsafeGroupIntServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupIntServiceServer will
// result in compilation errors.
type UnsafeGroupIntServiceServer interface {
	mustEmbedUnimplementedGroupIntServiceServer()
}

func RegisterGroupIntServiceServer(s grpc.ServiceRegistrar, srv GroupIntServiceServer) {
	// If the following call pancis, it indicates UnimplementedGroupIntServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupIntService_ServiceDesc, srv)
}

func _GroupIntService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupIntServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupIntService_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupIntServiceServer).Push(ctx, req.(*GroupPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupIntService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupIntServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupIntService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupIntServiceServer).Create(ctx, req.(*GroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupIntService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupIntServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupIntService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupIntServiceServer).Update(ctx, req.(*GroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupIntService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupIntServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupIntService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupIntServiceServer).Get(ctx, req.(*GroupGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupIntService_ServiceDesc is the grpc.ServiceDesc for GroupIntService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupIntService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logic.GroupIntService",
	HandlerType: (*GroupIntServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _GroupIntService_Push_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GroupIntService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GroupIntService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GroupIntService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/group.int.proto",
}
