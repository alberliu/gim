// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: logic/group.ext.proto

package logicpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupExtService_SendMessage_FullMethodName  = "/logic.GroupExtService/SendMessage"
	GroupExtService_Create_FullMethodName       = "/logic.GroupExtService/Create"
	GroupExtService_Update_FullMethodName       = "/logic.GroupExtService/Update"
	GroupExtService_Get_FullMethodName          = "/logic.GroupExtService/Get"
	GroupExtService_List_FullMethodName         = "/logic.GroupExtService/List"
	GroupExtService_AddMembers_FullMethodName   = "/logic.GroupExtService/AddMembers"
	GroupExtService_UpdateMember_FullMethodName = "/logic.GroupExtService/UpdateMember"
	GroupExtService_DeleteMember_FullMethodName = "/logic.GroupExtService/DeleteMember"
	GroupExtService_GetMembers_FullMethodName   = "/logic.GroupExtService/GetMembers"
)

// GroupExtServiceClient is the client API for GroupExtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupExtServiceClient interface {
	// 发送群组消息
	SendMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageReply, error)
	// 创建群组
	Create(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*GroupCreateReply, error)
	// 更新群组
	Update(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取群组信息
	Get(ctx context.Context, in *GroupGetRequest, opts ...grpc.CallOption) (*GroupGetReply, error)
	// 获取用户加入的所有群组
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GroupListReply, error)
	// 添加群组成员
	AddMembers(ctx context.Context, in *AddMembersRequest, opts ...grpc.CallOption) (*AddMembersReply, error)
	// 更新群组成员信息
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 添加群组成员
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取群组成员
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersReply, error)
}

type groupExtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupExtServiceClient(cc grpc.ClientConnInterface) GroupExtServiceClient {
	return &groupExtServiceClient{cc}
}

func (c *groupExtServiceClient) SendMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGroupMessageReply)
	err := c.cc.Invoke(ctx, GroupExtService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupExtServiceClient) Create(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*GroupCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupCreateReply)
	err := c.cc.Invoke(ctx, GroupExtService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupExtServiceClient) Update(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupExtService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupExtServiceClient) Get(ctx context.Context, in *GroupGetRequest, opts ...grpc.CallOption) (*GroupGetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupGetReply)
	err := c.cc.Invoke(ctx, GroupExtService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupExtServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GroupListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupListReply)
	err := c.cc.Invoke(ctx, GroupExtService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupExtServiceClient) AddMembers(ctx context.Context, in *AddMembersRequest, opts ...grpc.CallOption) (*AddMembersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddMembersReply)
	err := c.cc.Invoke(ctx, GroupExtService_AddMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupExtServiceClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupExtService_UpdateMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupExtServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GroupExtService_DeleteMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupExtServiceClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMembersReply)
	err := c.cc.Invoke(ctx, GroupExtService_GetMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupExtServiceServer is the server API for GroupExtService service.
// All implementations must embed UnimplementedGroupExtServiceServer
// for forward compatibility.
type GroupExtServiceServer interface {
	// 发送群组消息
	SendMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageReply, error)
	// 创建群组
	Create(context.Context, *GroupCreateRequest) (*GroupCreateReply, error)
	// 更新群组
	Update(context.Context, *GroupUpdateRequest) (*emptypb.Empty, error)
	// 获取群组信息
	Get(context.Context, *GroupGetRequest) (*GroupGetReply, error)
	// 获取用户加入的所有群组
	List(context.Context, *emptypb.Empty) (*GroupListReply, error)
	// 添加群组成员
	AddMembers(context.Context, *AddMembersRequest) (*AddMembersReply, error)
	// 更新群组成员信息
	UpdateMember(context.Context, *UpdateMemberRequest) (*emptypb.Empty, error)
	// 添加群组成员
	DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error)
	// 获取群组成员
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersReply, error)
	mustEmbedUnimplementedGroupExtServiceServer()
}

// UnimplementedGroupExtServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupExtServiceServer struct{}

func (UnimplementedGroupExtServiceServer) SendMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGroupExtServiceServer) Create(context.Context, *GroupCreateRequest) (*GroupCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupExtServiceServer) Update(context.Context, *GroupUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGroupExtServiceServer) Get(context.Context, *GroupGetRequest) (*GroupGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGroupExtServiceServer) List(context.Context, *emptypb.Empty) (*GroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGroupExtServiceServer) AddMembers(context.Context, *AddMembersRequest) (*AddMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMembers not implemented")
}
func (UnimplementedGroupExtServiceServer) UpdateMember(context.Context, *UpdateMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedGroupExtServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedGroupExtServiceServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedGroupExtServiceServer) mustEmbedUnimplementedGroupExtServiceServer() {}
func (UnimplementedGroupExtServiceServer) testEmbeddedByValue()                         {}

// UnsafeGroupExtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupExtServiceServer will
// result in compilation errors.
type UnsafeGroupExtServiceServer interface {
	mustEmbedUnimplementedGroupExtServiceServer()
}

func RegisterGroupExtServiceServer(s grpc.ServiceRegistrar, srv GroupExtServiceServer) {
	// If the following call pancis, it indicates UnimplementedGroupExtServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupExtService_ServiceDesc, srv)
}

func _GroupExtService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).SendMessage(ctx, req.(*SendGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupExtService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).Create(ctx, req.(*GroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupExtService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).Update(ctx, req.(*GroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupExtService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).Get(ctx, req.(*GroupGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupExtService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupExtService_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_AddMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).AddMembers(ctx, req.(*AddMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupExtService_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupExtService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupExtService_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupExtServiceServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupExtService_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupExtServiceServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupExtService_ServiceDesc is the grpc.ServiceDesc for GroupExtService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupExtService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logic.GroupExtService",
	HandlerType: (*GroupExtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _GroupExtService_SendMessage_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GroupExtService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GroupExtService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GroupExtService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupExtService_List_Handler,
		},
		{
			MethodName: "AddMembers",
			Handler:    _GroupExtService_AddMembers_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _GroupExtService_UpdateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _GroupExtService_DeleteMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _GroupExtService_GetMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/group.ext.proto",
}
