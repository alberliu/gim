// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: logic/message.int.proto

package logicpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageIntService_MessageACK_FullMethodName  = "/logic.MessageIntService/MessageACK"
	MessageIntService_PushToUsers_FullMethodName = "/logic.MessageIntService/PushToUsers"
	MessageIntService_PushToAll_FullMethodName   = "/logic.MessageIntService/PushToAll"
)

// MessageIntServiceClient is the client API for MessageIntService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageIntServiceClient interface {
	// 设备收到消息回执
	MessageACK(ctx context.Context, in *MessageACKRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 推送
	PushToUsers(ctx context.Context, in *PushToUsersRequest, opts ...grpc.CallOption) (*PushToUsersReply, error)
	// 全服推送
	PushToAll(ctx context.Context, in *PushToAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type messageIntServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageIntServiceClient(cc grpc.ClientConnInterface) MessageIntServiceClient {
	return &messageIntServiceClient{cc}
}

func (c *messageIntServiceClient) MessageACK(ctx context.Context, in *MessageACKRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MessageIntService_MessageACK_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageIntServiceClient) PushToUsers(ctx context.Context, in *PushToUsersRequest, opts ...grpc.CallOption) (*PushToUsersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushToUsersReply)
	err := c.cc.Invoke(ctx, MessageIntService_PushToUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageIntServiceClient) PushToAll(ctx context.Context, in *PushToAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MessageIntService_PushToAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageIntServiceServer is the server API for MessageIntService service.
// All implementations must embed UnimplementedMessageIntServiceServer
// for forward compatibility.
type MessageIntServiceServer interface {
	// 设备收到消息回执
	MessageACK(context.Context, *MessageACKRequest) (*emptypb.Empty, error)
	// 推送
	PushToUsers(context.Context, *PushToUsersRequest) (*PushToUsersReply, error)
	// 全服推送
	PushToAll(context.Context, *PushToAllRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMessageIntServiceServer()
}

// UnimplementedMessageIntServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageIntServiceServer struct{}

func (UnimplementedMessageIntServiceServer) MessageACK(context.Context, *MessageACKRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageACK not implemented")
}
func (UnimplementedMessageIntServiceServer) PushToUsers(context.Context, *PushToUsersRequest) (*PushToUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToUsers not implemented")
}
func (UnimplementedMessageIntServiceServer) PushToAll(context.Context, *PushToAllRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToAll not implemented")
}
func (UnimplementedMessageIntServiceServer) mustEmbedUnimplementedMessageIntServiceServer() {}
func (UnimplementedMessageIntServiceServer) testEmbeddedByValue()                           {}

// UnsafeMessageIntServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageIntServiceServer will
// result in compilation errors.
type UnsafeMessageIntServiceServer interface {
	mustEmbedUnimplementedMessageIntServiceServer()
}

func RegisterMessageIntServiceServer(s grpc.ServiceRegistrar, srv MessageIntServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageIntServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageIntService_ServiceDesc, srv)
}

func _MessageIntService_MessageACK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageACKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageIntServiceServer).MessageACK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageIntService_MessageACK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageIntServiceServer).MessageACK(ctx, req.(*MessageACKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageIntService_PushToUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushToUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageIntServiceServer).PushToUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageIntService_PushToUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageIntServiceServer).PushToUsers(ctx, req.(*PushToUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageIntService_PushToAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushToAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageIntServiceServer).PushToAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageIntService_PushToAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageIntServiceServer).PushToAll(ctx, req.(*PushToAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageIntService_ServiceDesc is the grpc.ServiceDesc for MessageIntService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageIntService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logic.MessageIntService",
	HandlerType: (*MessageIntServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MessageACK",
			Handler:    _MessageIntService_MessageACK_Handler,
		},
		{
			MethodName: "PushToUsers",
			Handler:    _MessageIntService_PushToUsers_Handler,
		},
		{
			MethodName: "PushToAll",
			Handler:    _MessageIntService_PushToAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logic/message.int.proto",
}
